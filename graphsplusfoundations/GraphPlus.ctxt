#BlueJ class context
comment0.target=GraphPlus
comment0.text=\n\ \ DO\ NOT\ CHANGE\ THIS\ FILE.\n\ \ GraphPlus.java\n\ \ Extends\ the\ Graph\ interface\ \n\ \ @author\ CS230\ Staff\n\ \ @version\ 2018.4.19\n
comment1.params=
comment1.target=GraphPlus\ clone()
comment1.text=\n\ Creates\ a\ new\ graph\ that\ has\ all\ the\ same\ vertices\n\ and\ arcs\ as\ the\ original.\n\ \n\ @return\ the\ new\ graph.\n
comment10.params=vertex
comment10.target=javafoundations.ArrayIterator\ bfsTraversalIter(java.lang.Object)
comment10.text=\n\ Returns\ an\ ArrayIterator\ containing\ a\ BREADTH-first\ search\n\ traversal\ of\ the\ graph\ starting\ at\ the\ given\ vertex.\ The\ result\n\ iterator\ should\ contain\ all\ vertices\ visited\ during\ the\ traversal\ in\n\ the\ order\ they\ were\ visited.\n\ \n\ @param\ vertex\:\ the\ starting\ vertex\ for\ the\ traversal\n\ @return\ an\ ArrayIterator\ with\ the\ vertices\ in\ breadth-first\ order\n\ @throws\ IllegalArgumentException\ if\ given\ vertex\ is\ not\ in\ graph\n
comment2.params=vertex
comment2.target=boolean\ isSink(java.lang.Object)
comment2.text=\n\ Checks\ if\ a\ vertex\ is\ a\ sink\ (points\ to\ no\ other\ vertex)\n\ \n\ @param\ vertex\:\ the\ potential\ sink\ vertex\n\ @return\ true\ if\ the\ vertex\ is\ a\ sink,\ false\ if\ it\ is\ not.\n\ @throws\ IllegalArgumentException\ if\ given\ vertex\ is\ not\ in\ graph\n
comment3.params=vertex
comment3.target=boolean\ isSource(java.lang.Object)
comment3.text=\n\ Checks\ if\ a\ vertex\ is\ a\ source\ (no\ vertex\ points\ to\ it)\n\ \n\ @param\ vertex\:\ the\ potential\ source\ vertex\n\ @return\ true\ if\ the\ vertex\ is\ a\ source,\ false\ if\ it\ is\ not\n\ @throws\ IllegalArgumentException\ if\ given\ vertex\ is\ not\ in\ graph\n
comment4.params=
comment4.target=java.util.LinkedList\ allSinks()
comment4.text=\n\ Retrieves\ all\ vertices\ that\ are\ sinks.\ \n\ \n\ @return\ all\ the\ sinks\ in\ a\ linked\ list\n
comment5.params=
comment5.target=java.util.LinkedList\ allSources()
comment5.text=\n\ Retrieves\ all\ vertices\ that\ are\ sources.\ \n\ \n\ @return\ all\ the\ sources\ in\ a\ linked\ list\n
comment6.params=vertex
comment6.target=boolean\ isIsolated(java.lang.Object)
comment6.text=\n\ Checks\ if\ a\ vertex\ is\ isolated,\ i.e.,\ no\ vertices\n\ point\ to\ it\ and\ it\ points\ to\ no\ vertices.\n\ \n\ @param\ vertex\:\ the\ vertex\ to\ check\ for\ isolation\n\ @return\ true\ if\ the\ vertex\ is\ isolated,\ false\ if\ it\ is\ not\n\ @throws\ IllegalArgumentException\ if\ given\ vertex\ is\ not\ in\ graph\n
comment7.params=startVertex
comment7.target=java.util.LinkedList\ dfsTraversal(java.lang.Object)
comment7.text=\n\ Returns\ a\ LinkedList\ containing\ a\ DEPTH-first\ search\n\ traversal\ of\ the\ graph\ starting\ at\ the\ given\ vertex.\ The\ result\n\ list\ should\ contain\ all\ vertices\ visited\ during\ the\ traversal\ in\n\ the\ order\ they\ were\ visited.\n\ You\ can\ use\ pseudocode\ from\ class\ materials\ as\ a\ starting\ point.\n\ \n\ @param\ vertex\:\ the\ starting\ vertex\ for\ the\ traversal\n\ @return\ a\ linked\ list\ with\ the\ vertices\ in\ depth-first\ order\n\ @throws\ IllegalArgumentException\ if\ given\ vertex\ is\ not\ in\ graph\n
comment8.params=startVertex
comment8.target=javafoundations.ArrayIterator\ dfsTraversalIter(java.lang.Object)
comment8.text=\n\ Returns\ an\ ArrayIterator\ containing\ a\ DEPTH-first\ search\n\ traversal\ of\ the\ graph\ starting\ at\ the\ given\ vertex.\ The\ result\n\ iterator\ should\ contain\ all\ vertices\ visited\ during\ the\ traversal\ in\n\ the\ order\ they\ were\ visited.\n\ You\ can\ use\ pseudocode\ from\ class\ materials\ as\ a\ starting\ point.\n\ \n\ @param\ vertex\:\ the\ starting\ vertex\ for\ the\ traversal\n\ @return\ an\ ArrayIterator\ with\ the\ vertices\ in\ depth-first\ order\n\ @throws\ IllegalArgumentException\ if\ given\ vertex\ is\ not\ in\ graph\n
comment9.params=startVertex
comment9.target=java.util.LinkedList\ bfsTraversal(java.lang.Object)
comment9.text=\n\ Returns\ a\ LinkedList\ containing\ a\ BREADTH-first\ search\n\ traversal\ of\ a\ graph\ starting\ at\ the\ given\ vertex.\ \ The\ result\n\ list\ should\ contain\ all\ vertices\ visited\ during\ the\ traversal\ in\n\ the\ order\ they\ were\ visited.\n\ \n\ @param\ vertex\:\ the\ starting\ vertex\ for\ the\ traversal\n\ @return\ a\ linked\ list\ with\ the\ vertices\ in\ breadth-first\ order\n\ @throws\ IllegalArgumentException\ if\ given\ vertex\ is\ not\ in\ graph\n
numComments=11
